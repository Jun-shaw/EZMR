install_github("Jun-shaw/EZMR")
visualize_MR <-function(filename,
outcome.num=3,
outcome.name=c('A','B','C'),
color1=c("#003399","#ffffff","#cc0033"),
color2=c( "#663366", "#ffffff","#ff9933"),
color3=c( "#cccc00", "#ffffff", "#66cc99"),
color4=NA,
range=c(0.5, 1, 2),
threshold1=0.05,
threshold2=0.01,
category=T,
group_colors=c('#CC88B0', '#DBE0ED', '#87B5B2', '#F4CEB4', '#F1DFA4', '#998DB7')
)
{
#假设有个热图的矩阵数据（这里仅为一组重复两次以作示范）
print('处理数据......')
data=fread(filename)
df=data %>% as.data.frame()#数据转化为数据框
rownames(df)=df[,1]
df=df[,-1]
for (i in 1:outcome.num) {
cir <- df[((i-1)*6+1):((i-1)*6+3)]
star <- df[((i-1)*6+4):(i*6)]
assign(paste("cir", i, sep = ""), cir)
assign(paste("star", i, sep = ""), star)
}
cir_group <- as.matrix(df[, ncol(df)])
get_stars <- function(value) {
if (value < threshold2) {
stars <- "**"
} else if (value < threshold1) {
stars <- "*"
} else {
stars <- ""
}
return(stars)
}
#如果矩阵数据分组，可用split参数来指定分类变量
if(category==T){
ann_row =data.frame(pathway=df$category)#对行进行注释，用于后续的热图分裂
row.names(ann_row) = rownames(cir1)
ann_row <- as.matrix(ann_row)}#在circlize函数中，需要为matrix
print('开始生成热图.......')
circos.clear()
#定义热图颜色梯度：
mycol1=colorRamp2(range,color1)#设置legend颜色，
if (outcome.num>1){mycol2 = colorRamp2(range,color2)}
if (outcome.num>2){mycol3 = colorRamp2(range,color3)}
if (outcome.num>3){mycol4 = colorRamp2(range,color4)}
mycol <- list(mycol1)
if (outcome.num>1){mycol <- list(mycol1,mycol2)}
if (outcome.num>2){mycol <- list(mycol1,mycol2,mycol3)}
if (outcome.num>3){mycol <- list(mycol1,mycol2,mycol3,mycol4)}
circos.par(gap.after=c(2,2,2,2,2,90))#circos.par()调整圆环首尾间的距离，数值越大，距离越宽#让分裂的一个口大一点，可以添加行信息
circos.heatmap(cir1,col=mycol1,
split=ann_row, #用行注释分裂热图
rownames.col="black",
show.sector.labels = F,
track.height = 0.15, #轨道的高度，数值越大圆环越粗
rownames.side="outside",
rownames.cex=0.8,#字体大小
rownames.font=1,#字体粗细
bg.border="black", #背景边缘颜色
dend.side="inside",#dend.side：控制行聚类树的方向，inside为显示在圆环内圈，outside为显示在圆环外圈
cluster=F,#cluster=TRUE为对行聚类，cluster=FALSE则不显示聚类
dend.track.height=0.2,#调整行聚类树的高度
dend.callback=function(dend,m,si) { #dend.callback：用于聚类树的回调，当需要对聚类树进行重新排序，或者添加颜色时使用包含的三个参数：dend：当前扇区的树状图；m：当前扇区对应的子矩阵；si：当前扇区的名称
color_branches(dend,k=10,col=1:10) #color_branches():修改聚类树颜色#聚类树颜色改为1，即单色/黑色
}
)
if (outcome.num>1){
circos.heatmap(cir2,
col = mycol2,
split=ann_row,track.height = 0.15,
bg.border="black", #背景边缘颜色
rownames.cex=0.3)#加入第二个热图
}
if (outcome.num>2){
circos.heatmap(cir3,
col = mycol3,
split=ann_row,track.height = 0.15,
bg.border="black", #背景边缘颜色
rownames.cex=0.3,
)
}
if (outcome.num>3){
circos.heatmap(cir4,
col = mycol4,
split=ann_row,track.height = 0.15,
bg.border="black", #背景边缘颜色
rownames.cex=0.3,
)
}
if(category==T){
# 创建行名分类信息与颜色的配对
group_names <-  unique(df$category)
group_colors <- group_colors
# 创建命名向量将这两者配对
row_colors <- setNames(group_colors, group_names)
circos.heatmap(cir_group,
col = row_colors,
split=ann_row,
track.height = 0.05,
bg.border="black", #背景边缘颜色
rownames.cex=0.3,
show.sector.labels = F,)
}
#添加列名#
#第一个环形列名
circos.track(track.index=get.current.track.index(),panel.fun=function(x,y){
if(CELL_META$sector.numeric.index==6){# the last sector
cn=colnames(cir1)
n=length(cn)
circos.text(rep(CELL_META$cell.xlim[2],n)+convert_x(1,"mm"),#x坐标
(1:n)*1.2+5,#调整y坐标,行距+距离中心距(1:n)*1.2+5,
cn,cex=1,adj=c(0,0),facing="inside")
}
},bg.border=NA)
print('添加图例......')
library(circlize)
library(gridBase)
for (i in 1:outcome.num){
lg_Exp=Legend(title=outcome[i],col_fun=mycol[[i]],direction = c("vertical"))
assign(paste("lg_Exp", i, sep = ""), lg_Exp)
}
# 创建图例
circle_size= unit(0.6,"snpc")
h= dev.size()
lgd_list= packLegend(lg_Exp1,lg_Exp2,lg_Exp3, max_height = unit(2*h,"inch"))
if (outcome.num>1){lgd_list= packLegend(lg_Exp1,lg_Exp2, max_height = unit(2*h,"inch"))}
if (outcome.num>2){lgd_list= packLegend(lg_Exp1,lg_Exp2,lg_Exp3, max_height = unit(2*h,"inch"))}
if (outcome.num>3){lgd_list= packLegend(lg_Exp1,lg_Exp2,lg_Exp3,lg_Exp4, max_height = unit(2*h,"inch"))}
draw(lgd_list, x = circle_size, just ="midle")
}
library(EZMR)
visualize_MR(filename = 'data/前列腺炎增癌result.csv',
outcome.num=3,
outcome.name=c('A','B','C'),
color1=c("#003399","#ffffff","#cc0033"),
color2=c( "#663366", "#ffffff","#ff9933"),
color3=c( "#cccc00", "#ffffff", "#66cc99"),
color4=NA,
range=c(0.5, 1, 2),
threshold1=0.05,
threshold2=0.01,
category=T,
group_colors=c('#CC88B0', '#DBE0ED', '#87B5B2', '#F4CEB4', '#F1DFA4', '#998DB7')
)
visualize_MR(filename = 'data/前列腺炎增癌result.csv',
outcome.num=2,
outcome.name=c('A','B'),
color1=c("#003399","#ffffff","#cc0033"),
color2=c( "#663366", "#ffffff","#ff9933"),
color3=c( "#cccc00", "#ffffff", "#66cc99"),
color4=NA,
range=c(1,2,3),
threshold1=0.01,
threshold2=0.005,
category=T,
group_colors=c('#CC88B0', '#DBE0ED', '#87B5B2', '#F4CEB4', '#F1DFA4', '#998DB7')
)
usethis::use_r("Forest_plot_MR")
#读取数据
dt <- read.csv("data/前列腺癌result",header = T,fileEncoding = 'GBK')
#读取数据
dt <- read.csv("data/前列腺癌result.csv",header = T,fileEncoding = 'GBK')
View(dt)
dt<-dt[,1:10]#(3,5)
View(dt)
dt$` ` <- paste(rep(" ", 20), collapse = " ")
View(dt)
dt$'OR(95%CI)'<-ifelse(is.na(dt$or),"",
sprintf('%.2f(%.2f to %.2f)',
dt$or,dt$or_lci95,dt$or_uci95))
View(dt)
dt[is.na(dt)] <- " "
View(dt)
#绘图
tm <- forest_theme(base_size = 10, # 基础大小
# 可信区间点的形状，线型、颜色、宽度
ci_pch = 20,
ci_col = "#4575b4", # #762a83
ci_lty = 1,
ci_lwd = 2.3,
ci_Theight = 0.2, # 可信区间两端加短竖线
# 参考线宽度、形状、颜色
refline_lwd = 1.5,
refline_lty = "dashed",
refline_col = "red",
# 汇总菱形的填充色和边框色
summary_fill = "#4575b4",
summary_col = "#4575b4",
# 脚注大小、字体、颜色
footnote_cex = 1.1,
footnote_fontface = "italic",
footnote_col = "blue")
#布置环境
library(grid)
library(forestploter)
library(forestplot)
#绘图
tm <- forest_theme(base_size = 10, # 基础大小
# 可信区间点的形状，线型、颜色、宽度
ci_pch = 20,
ci_col = "#4575b4", # #762a83
ci_lty = 1,
ci_lwd = 2.3,
ci_Theight = 0.2, # 可信区间两端加短竖线
# 参考线宽度、形状、颜色
refline_lwd = 1.5,
refline_lty = "dashed",
refline_col = "red",
# 汇总菱形的填充色和边框色
summary_fill = "#4575b4",
summary_col = "#4575b4",
# 脚注大小、字体、颜色
footnote_cex = 1.1,
footnote_fontface = "italic",
footnote_col = "blue")
p <- forest(dt[,c(1:4, 11:12,8:10)],#选择数据1-3列和8-9列作为森林图元素
est = dt$or,#HR
lower = dt$or_lci95,#可信区间下限
upper = dt$or_uci95,#可信区间上限
sizes = 0.6,#点估计框大小，用标准误映射
ci_column = 5,#可信区间在第几列展示
ref_line = 1,
xlim = c(0,2),
ticks_at = c(0,1,2),
arrow_lab = c('protective factor','risk factor'),
footnote = 'P<0.05 was considered statistically significant',
theme = tm)#主题
print(p)
View(dt)
p <- forest(dt[,c(1:4, 11:12,8:10)],#选择数据1-3列和8-9列作为森林图元素
est = dt$or,#HR
lower = dt$or_lci95,#可信区间下限
upper = dt$or_uci95,#可信区间上限
sizes = 0.6,#点估计框大小，用标准误映射
ci_column = 5,#可信区间在第几列展示
ref_line = 1,
xlim = c(0,2),
ticks_at = c(0,1,2),
arrow_lab = c('protective factor','risk factor'),
footnote = 'P<0.05 was considered statistically significant',
theme = 'tm')#主题
p <- forest(dt[,c(1:4, 11:12,8:10)],#选择数据1-3列和8-9列作为森林图元素
est = dt$or,#HR
lower = dt$or_lci95,#可信区间下限
upper = dt$or_uci95,#可信区间上限
sizes = 0.6,#点估计框大小，用标准误映射
ci_column = 5,#可信区间在第几列展示
ref_line = 1,
ticks_at = c(0,1,2),
arrow_lab = c('protective factor','risk factor'),
footnote = 'P<0.05 was considered statistically significant',
theme = tm)#主题
print(p)
p <- forest(dt[,c(1:4, 11:12,8:10)],#选择数据1-3列和8-9列作为森林图元素
est = dt$or,#HR
lower = dt$or_lci95,#可信区间下限
upper = dt$or_uci95,#可信区间上限
sizes = 0.6,#点估计框大小，用标准误映射
ci_column = 5,#可信区间在第几列展示
ref_line = 1,
xlim = c(0,2),
ticks_at = c(0,1,2),
arrow_lab = c('protective factor','risk factor'),
footnote = 'P<0.05 was considered statistically significant',
theme = tm)#主题
print(p)
#读取数据
dt <- read.csv("data/前列腺癌result.csv",header = T,fileEncoding = 'GBK')
dt<-dt[,1:column_num]#(3,5)
dt$` ` <- paste(rep(" ", 20), collapse = " ")
Calculate_MR <- function (file='',
column_num=10,
Shape_col="#4575b4",
line_col="#CE5C69",
text_col='#A281B1',
P_threshold=0.05,
range = c(0,2),
cutoff = c(0,1,2)
)
#读取数据
dt <- read.csv("data/前列腺癌result.csv",header = T,fileEncoding = 'GBK')
dt<-dt[,1:column_num]#(3,5)
column_num=10
Shape_col="#4575b4"
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(EZMR)
devtools::load_all()
devtools::load_all()
Forest_plot_MR(file = 'data/前列腺癌result.csv',
column_num=10,
Shape_col='#4575b4',
line_col='#CE5C69',
text_col='#A281B1',
P_threshold=0.05,
range = c(0,2),
cutoff = c(0,1,2)
)
devtools::load_all()
Forest_plot_MR(file = 'data/前列腺癌result.csv',
column_num=10,
Shape_col='#4575b4',
line_col='#CE5C69',
text_col='#A281B1',
P_threshold=0.05,
range = c(0,2),
cutoff = c(0,1,2)
)
Forest_plot_MR(file = 'data/前列腺癌result.csv',
column_num=10,
Shape_col='#4575b4',
line_col='#CE5C69',
text_col='#A281B1',
P_threshold=0.05,
range = c(0,2),
cutoff = c(0,1,2)
)
devtools::load_all()
Forest_plot_MR(file = 'data/前列腺癌result.csv',
column_num=10,
Shape_col='#4575b4',
line_col='#CE5C69',
text_col='#A281B1',
P_threshold=0.05,
range = c(0,2),
cutoff = c(0,1,2)
)
Forest_plot_MR(file = 'data/前列腺癌result.csv',
column_num=10,
Shape_col='#4575b4',
line_col='#CE5C69',
text_col='#4575b4',
P_threshold=0.05,
range = c(0,2),
cutoff = c(0,1,2)
)
devtools::load_all()
devtools::load_all()
!is.na(exposure.id)
exposure.id=,
exposure.id=
exposure.id=''
if(!is.na(exposure.id))
!is.na(exposure.id)
exposure.id=NA
!is.na(exposure.id)
install_git('jun-shaw/EZMR')
install_github('jun-shaw/EZMR')
install_github('jun-shaw/EZMR')
install_github("Jun-shaw/EZMR")
library(devtools)
install_github("Jun-shaw/EZMR")
devtools::load_all()
devtools::check()
devtools::check()
install.packages("ComplexHeatmap")
library(ComplexHeatmap)
library(data.table)
library(tidyverse)
library(circlize)
library(dplyr)
library(RColorBrewer)
devtools::check()
devtools::check()
devtools:install_github("Jun-shaw/EZMR")
remotes::install_github("Jun-shaw/EZMR")
remove.packages("EZMR")
remotes::install_github("Jun-shaw/EZMR")
library(EZMR)
library(EZMR)
remotes::install_github("Jun-shaw/EZMR")
library(EZMR)
filter_IVs(folder.path='',
file.type='',
SNP='',
beta='',
se='',
effect='',
other='',
P='',
EAF='',
sample.num=,
Pfilter=5e-08,
kb=10000,
r2=0.001,
Ffilter=10)
calculate_MR(folder.path='',
exposure.id=NA,#如果使用open GWAS数据则需要下列输入筛选条件
Pfilter=5e-08,
kb=10000,
r2=0.001,
outcome.id='',
outcome.name='',
valid=T,
valid_threshold=0.05)
filter_IVs
filter_IVs
calculate_MR <- function (folder.path='',
exposure.id=NA,#如果使用open GWAS数据则需要下列输入筛选条件
Pfilter=5e-08,
kb=10000,
r2=0.001,
outcome.id='',
outcome.name='',
valid=T,
valid_threshold=0.05)
{
library(MendelianRandomization)
library(TwoSampleMR)
if(!is.na(exposure.id)){
for (i in exposure.id) {
extract_instruments(outcomes=i,p<Pfilter,clump=TRUE, r2=r2,kb=kb,access_token= NULL)
outcome_dat<-extract_outcome_data(snps=exposure_dat$SNP,
outcomes=outcome.id, #finn-b-N14_PROSTHYPERPLA #finn-b-N14_PROSTATITIS #finn-b-C3_PROSTATE
proxies = FALSE,
maf_threshold = 0.01,
access_token = NULL)
#write.csv(outcome_dat, file="outcome_dat.csv", row.names=F)
dat <- harmonise_data(exposure_dat = exposure_dat,outcome_dat = outcome_dat)
mrResult=mr(dat, method_list=c("mr_ivw", "mr_egger_regression", "mr_penalised_weighted_median"))
mrTab=generate_odds_ratios(mrResult)
#mrTab$id.exposure <- gsub("工具变量/(.*?)\\.imp.*", "\\1", file)
dir_name <- paste0(outcome.id,'结果')
dir.create(dir_name)
write.csv(mrTab, file=paste0(dir_name,"/", gsub("工具变量/", "", file), "_result.csv"), row.names=F)
}
}
else{
folder_path <- folder.path
file_list <- list.files(path = folder_path, pattern = "\\.csv$", full.names = TRUE)
for (file in file_list) {
exposure_dat<-read_exposure_data(filename = file,
sep = ",",
snp_col = "SNP",
beta_col = "beta.exposure",
se_col = "se.exposure",
effect_allele_col = "effect_allele.exposure",
pval_col = "pval.exposure",
other_allele_col = "other_allele.exposure",
eaf_col = "eaf.exposure",
clump = F)
outcome_dat<-extract_outcome_data(snps=exposure_dat$SNP,
outcomes=outcome.id, #finn-b-N14_PROSTHYPERPLA #finn-b-N14_PROSTATITIS #finn-b-C3_PROSTATE
proxies = FALSE,
maf_threshold = 0.01,
access_token = NULL)
#write.csv(outcome_dat, file="outcome_dat.csv", row.names=F)
dat <- harmonise_data(exposure_dat = exposure_dat,outcome_dat = outcome_dat)
mrResult=mr(dat, method_list=c("mr_ivw", "mr_egger_regression", "mr_penalised_weighted_median"))
mrTab=generate_odds_ratios(mrResult)
#mrTab$id.exposure <- gsub("工具变量/(.*?)\\.imp.*", "\\1", file)
dir_name <- paste0(outcome.id,'结果')
dir.create(dir_name)
write.csv(mrTab, file=paste0(dir_name,"/", gsub("工具变量/", "", file), "_result.csv"), row.names=F)
}
}
if (valid ==T) {
use_package("MRPRESSO")
library(MRPRESSO)
mr_presso(BetaOutcome ="beta.outcome", BetaExposure = "beta.exposure", SdOutcome ="se.outcome", SdExposure = "se.exposure",
OUTLIERtest = TRUE,DISTORTIONtest = TRUE, data = dat, NbDistribution = 1000,
SignifThreshold = valid_threshold)
dir.create(outcome.name)
#异质性检验
heterTab=mr_heterogeneity(dat)
write.csv(heterTab, file=paste0(outcome.name,"/", gsub("工具变量/", "", file), "_heterTab.csv"), row.names=F)
#多效性检验
pleioTab=mr_pleiotropy_test(dat)
write.csv(pleioTab, file=paste0(outcome.name,"/", gsub("工具变量/", "", file), "_pleioTab.csv"), row.names=F)
}
}
calculate_MR
devtools::load_all()
library(EZMR)
library(EZMR)
calculate_MR
library(EZMR)
calculate_MR(folder.path='',
exposure.id=NA,#如果使用open GWAS数据则需要下列输入筛选条件
Pfilter=5e-08,
kb=10000,
r2=0.001,
outcome.id='',
outcome.name='',
valid=T,
valid_threshold=0.05)
calculate_MR
filter_IVs
Result_MR
result_MR
visualize_MR
library(devtools)
library(roxygen2)
library(EZMR)
filter_IVs
filter_IVs
remove.packages("EZMR")
remotes::install_github("Jun-shaw/EZMR")
library(EZMR)
library(EZMR)
library(EZMR)
remotes::install_github("Jun-shaw/EZMR")
library(EZMR)
filter_IVs
calculate_MR
